# -*- coding: utf-8 -*-
"""GAN-FaceGeneration.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i8pS-LAK0hPHdqZ7T1X57Jkav3rLMj1O
"""

"""# Fetch Codebase and Models"""

import os
import string
tmp_dir="/content/downloaded_imgs/"
"""# Define Utility Functions"""

import subprocess
import sys

bashCommand = "git clone https://github.com/genforce/interfacegan.git interfacegan"
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output, error = process.communicate()

bashCommand = "wget https://www.dropbox.com/s/nmo2g3u0qt7x70m/stylegan_celebahq.pth?dl=1 -O interfacegan/models/pretrain/stylegan_celebahq.pth --quiet"
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output, error = process.communicate()

os.chdir('/content')
CODE_DIR = 'interfacegan'
os.chdir(f'./{CODE_DIR}')

import os.path
import io
import IPython.display
import numpy as np
import cv2
import PIL.Image

import torch
import matplotlib.pyplot as plt
from interfacegan.models.model_settings import MODEL_POOL
from interfacegan.models.stylegan_generator import StyleGANGenerator
from interfacegan.utils.manipulator import linear_interpolate

import random

def build_generator(model_name):
  """Builds the generator by model name."""
  generator = StyleGANGenerator(model_name)
  return generator


def sample_codes(generator, num, latent_space_type='Z', seed=0):
  """Samples latent codes randomly."""
  np.random.seed(seed)
  codes = generator.easy_sample(num)
  if latent_space_type == 'W':
    codes = torch.from_numpy(codes).type(torch.FloatTensor).to(generator.run_device)
    codes = generator.get_value(generator.model.mapping(codes))
  return codes


def imshow(images, col, viz_size=256):
  """Shows images in one figure."""
  num, height, width, channels = images.shape
  assert num % col == 0
  row = num // col
  fused_image = np.zeros((viz_size * row, viz_size * col, channels), dtype=np.uint8)
  for idx, image in enumerate(images):
    i, j = divmod(idx, col)
    y = i * viz_size
    x = j * viz_size
    if height != viz_size or width != viz_size:
      image = cv2.resize(image, (viz_size, viz_size))
    fused_image[y:y + viz_size, x:x + viz_size] = image

  fused_image = np.asarray(fused_image, dtype=np.uint8)
  data = io.BytesIO()
  PIL.Image.fromarray(fused_image).save(data, 'jpeg')
  im_data = data.getvalue()
  disp = IPython.display.display(IPython.display.Image(im_data))
  return disp

"""# Select a Model"""

#@title { display-mode: "form", run: "auto" }
model_name = "stylegan_celebahq" #@param ['pggan_celebahq','stylegan_celebahq', 'stylegan_ffhq']
latent_space_type = 'Z' #@param ['Z', 'W']

generator = build_generator(model_name)

ATTRS = ['age', 'eyeglasses', 'gender', 'pose', 'smile']
boundaries = {}
for i, attr_name in enumerate(ATTRS):
  boundary_name = f'{model_name}_{attr_name}'
  if generator.gan_type == 'stylegan' and latent_space_type == 'W':
    boundaries[attr_name] = np.load(f'boundaries/{boundary_name}_w_boundary.npy')
  else:
    boundaries[attr_name] = np.load(f'boundaries/{boundary_name}_boundary.npy')

"""# Sample latent codes"""

#@title { display-mode: "form", run: "auto" }

num_samples = 1 #@param {type:"slider", min:1, max:8, step:1}
noise_seed = random.randint(0, 1000) #@param {type:"slider", min:0, max:1000, step:1}

latent_codes = sample_codes(generator, num_samples, latent_space_type, noise_seed)
if generator.gan_type == 'stylegan' and latent_space_type == 'W':
  synthesis_kwargs = {'latent_space_type': 'W'}
else:
  synthesis_kwargs = {}

images = generator.easy_synthesize(latent_codes, **synthesis_kwargs)['image']
imshow(images, col=num_samples)

"""# Edit facial attributes"""

#@title { display-mode: "form", run: "auto" }

age = float(sys.argv[1]) #@param {type:"slider", min:-3.0, max:3.0, step:0.1}
eyeglasses = float(sys.argv[2]) #@param {type:"slider", min:-2.9, max:3.0, step:0.1}
gender = float(sys.argv[3]) #@param {type:"slider", min:-3.0, max:3.0, step:0.1}
pose = float(sys.argv[4]) #@param {type:"slider", min:-3.0, max:3.0, step:0.1}
smile = float(sys.argv[5]) #@param {type:"slider", min:-3.0, max:3.0, step:0.1}

new_codes = latent_codes.copy()
for i, attr_name in enumerate(ATTRS):
  new_codes += boundaries[attr_name] * eval(attr_name)
plt.figure()
new_images = generator.easy_synthesize(new_codes, **synthesis_kwargs)['image']
img_name=''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(6))
plt.imsave(tmp_dir+img_name+'.jpg', new_images.squeeze(0))

def return_img(): return 'tmp_dir+img_name.jpg'; return_img